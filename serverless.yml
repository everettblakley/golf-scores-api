# NOTE: update this with your service name
service: golf-scores-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
   tableName: golf-scores 
  
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  create:
    # Defines an HTTP API endpoint that calls the main function in create.js
    # - path: url path is /scores
    # - method: POST request
    # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
    #     domain api call
    # - authorizer: authenticate using the AWS IAM role
    handler: create.main
    events:
      - http:
        path: scores
        method: post
        cors: true
        authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /scores/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: scores/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /scores
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: scores
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /scores/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: scores/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /scores/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: scores/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  handicap:
    # Defines and HTTP API endpoint that calls the main function in handicap.js
    # - path: url is /handicap
    # - method: GET request
    handler: handicap.main
    events:
      - http:
          path: handicap
          method: get
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
